{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorButton.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","alt","src","concat","CardList","robots","hasError","console","log","Error","map","robot","i","components_Card","key","username","Scroll","props","style","overflowY","border","height","children","ErrorButton","errorButtonClicked","href","onClick","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","info","setState","Component","App","onSearchChange","event","searchField","target","value","cardListError","_this2","fetch","then","response","json","users","_this$state","filterRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","components_ErrorButton","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7075e62.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange} \n            />\n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return(\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='Imagend del tobot de lina' src= {`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h1>{name}</h1>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots, hasError}) => {\n    if (hasError){\n        console.log(hasError)\n        throw new Error(\"waaaaaaaaaa!\");\n        \n    }\n    return(\n        <div>\n            {robots.map((robot, i) => \n                <Card \n                    key={i} \n                    id={robot.id} \n                    name={robot.username} \n                    email={robot.email}\n                />\n            )}  \n        </div>\n    ); \n}\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style = {{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\nexport default Scroll;","import React from 'react';\n\nconst ErrorButton = ({errorButtonClicked}) =>{\n    return(\n    <div className='pa3 ma2'>\n        <a \n            className=\"f2 link dim br3 ph3 pv2 mb2 dib white bg-dark-green\" \n            href=\"#0\"\n            onClick = {errorButtonClicked}\n        >Throw an error!</a>\n    </div>\n    );\n}\n\nexport default ErrorButton;","import React, {Component} from  'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oooooops! Something went wrong...</h1>\n        }else{\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from   'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from   '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorButton from '../components/ErrorButton';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\nclass App extends Component{\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: '',\n            cardListError: false\n        }\n    }\n\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>{response.json()\n            .then(users =>{this.setState({robots: users});\n            })\n        }) \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value })\n    }\n\n    errorButtonClicked = (event) => {\n        this.setState({cardListError: true})\n    }\n\n    render(){\n        const {robots, searchField, cardListError} = this.state;\n        const filterRobots = robots.filter(robot => {\n            return robot.username.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return !robots.length ? <h1 className= 'tc header-font pa1 ma2 purple'>Loading</h1>:\n        (\n            <div className='tc'>\n                <h1 className='header-font pa1 ma2 purple'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filterRobots} hasError={cardListError}/>\n                    </ErrorBoundry>\n                </Scroll>\n                <ErrorButton errorButtonClicked ={this.errorButtonClicked}/>\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}